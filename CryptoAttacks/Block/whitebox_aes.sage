#!/usr/bin/env sage

from builtins import bytes
from random import randint

from CryptoAttacks.Utils import i2b, b2i


XorBox = [0x0,0x1,0x2,0x3,0x4,0x5,0x6,0x7,0x8,0x9,0xa,0xb,0xc,0xd,0xe,0xf,0x1,0x0,0x3,0x2,0x5,0x4,0x7,0x6,0x9,0x8,0xb,0xa,0xd,0xc,0xf,0xe,0x2,0x3,0x0,0x1,0x6,0x7,0x4,0x5,0xa,0xb,0x8,0x9,0xe,0xf,0xc,0xd,0x3,0x2,0x1,0x0,0x7,0x6,0x5,0x4,0xb,0xa,0x9,0x8,0xf,0xe,0xd,0xc,0x4,0x5,0x6,0x7,0x0,0x1,0x2,0x3,0xc,0xd,0xe,0xf,0x8,0x9,0xa,0xb,0x5,0x4,0x7,0x6,0x1,0x0,0x3,0x2,0xd,0xc,0xf,0xe,0x9,0x8,0xb,0xa,0x6,0x7,0x4,0x5,0x2,0x3,0x0,0x1,0xe,0xf,0xc,0xd,0xa,0xb,0x8,0x9,0x7,0x6,0x5,0x4,0x3,0x2,0x1,0x0,0xf,0xe,0xd,0xc,0xb,0xa,0x9,0x8,0x8,0x9,0xa,0xb,0xc,0xd,0xe,0xf,0x0,0x1,0x2,0x3,0x4,0x5,0x6,0x7,0x9,0x8,0xb,0xa,0xd,0xc,0xf,0xe,0x1,0x0,0x3,0x2,0x5,0x4,0x7,0x6,0xa,0xb,0x8,0x9,0xe,0xf,0xc,0xd,0x2,0x3,0x0,0x1,0x6,0x7,0x4,0x5,0xb,0xa,0x9,0x8,0xf,0xe,0xd,0xc,0x3,0x2,0x1,0x0,0x7,0x6,0x5,0x4,0xc,0xd,0xe,0xf,0x8,0x9,0xa,0xb,0x4,0x5,0x6,0x7,0x0,0x1,0x2,0x3,0xd,0xc,0xf,0xe,0x9,0x8,0xb,0xa,0x5,0x4,0x7,0x6,0x1,0x0,0x3,0x2,0xe,0xf,0xc,0xd,0xa,0xb,0x8,0x9,0x6,0x7,0x4,0x5,0x2,0x3,0x0,0x1,0xf,0xe,0xd,0xc,0xb,0xa,0x9,0x8,0x7,0x6,0x5,0x4,0x3,0x2,0x1,0x0]
Ty = [[0, 50397442, 100794884, 84083462, 201589768, 251987210, 168166924, 151455502, 403179536, 453576978, 503974420,
       487262998, 336333848, 386731290, 302911004, 286199582, 806359072, 856756514, 907153956, 890442534, 1007948840,
       1058346282, 974525996, 957814574, 672667696, 723065138, 773462580, 756751158, 605822008, 656219450, 572399164,
       555687742, 1612718144, 1663115586, 1713513028, 1696801606, 1814307912, 1864705354, 1780885068, 1764173646,
       2015897680, 2066295122, 2116692564, 2099981142, 1949051992, 1999449434, 1915629148, 1898917726, 1345335392,
       1395732834, 1446130276, 1429418854, 1546925160, 1597322602, 1513502316, 1496790894, 1211644016, 1262041458,
       1312438900, 1295727478, 1144798328, 1195195770, 1111375484, 1094664062, 3225436288, 3275833730, 3326231172,
       3309519750, 3427026056, 3477423498, 3393603212, 3376891790, 3628615824, 3679013266, 3729410708, 3712699286,
       3561770136, 3612167578, 3528347292, 3511635870, 4031795360, 4082192802, 4132590244, 4115878822, 4233385128,
       4283782570, 4199962284, 4183250862, 3898103984, 3948501426, 3998898868, 3982187446, 3831258296, 3881655738,
       3797835452, 3781124030, 2690670784, 2741068226, 2791465668, 2774754246, 2892260552, 2942657994, 2858837708,
       2842126286, 3093850320, 3144247762, 3194645204, 3177933782, 3027004632, 3077402074, 2993581788, 2976870366,
       2423288032, 2473685474, 2524082916, 2507371494, 2624877800, 2675275242, 2591454956, 2574743534, 2289596656,
       2339994098, 2390391540, 2373680118, 2222750968, 2273148410, 2189328124, 2172616702, 2608889883, 2558624025,
       2642575903, 2659418909, 2542044179, 2491778321, 2441512471, 2458355477, 2206763019, 2156497161, 2240449039,
       2257292045, 2408352771, 2358086913, 2307821063, 2324664069, 2878378043, 2828112185, 2912064063, 2928907069,
       2811532339, 2761266481, 2711000631, 2727843637, 3013122091, 2962856233, 3046808111, 3063651117, 3214711843,
       3164445985, 3114180135, 3131023141, 4221608027, 4171342169, 4255294047, 4272137053, 4154762323, 4104496465,
       4054230615, 4071073621, 3819481163, 3769215305, 3853167183, 3870010189, 4021070915, 3970805057, 3920539207,
       3937382213, 3417354363, 3367088505, 3451040383, 3467883389, 3350508659, 3300242801, 3249976951, 3266819957,
       3552098411, 3501832553, 3585784431, 3602627437, 3753688163, 3703422305, 3653156455, 3669999461, 1539358875,
       1489093017, 1573044895, 1589887901, 1472513171, 1422247313, 1371981463, 1388824469, 1137232011, 1086966153,
       1170918031, 1187761037, 1338821763, 1288555905, 1238290055, 1255133061, 1808847035, 1758581177, 1842533055,
       1859376061, 1742001331, 1691735473, 1641469623, 1658312629, 1943591083, 1893325225, 1977277103, 1994120109,
       2145180835, 2094914977, 2044649127, 2061492133, 1004593371, 954327513, 1038279391, 1055122397, 937747667,
       887481809, 837215959, 854058965, 602466507, 552200649, 636152527, 652995533, 804056259, 753790401, 703524551,
       720367557, 200339707, 150073849, 234025727, 250868733, 133494003, 83228145, 32962295, 49805301, 335083755,
       284817897, 368769775, 385612781, 536673507, 486407649, 436141799, 452984805],
      [0, 16843267, 33686534, 50529797, 67373068, 84216335, 101059594, 117902857, 134746136, 151589403, 168432670,
       185275933, 202119188, 218962455, 235805714, 252648977, 269492272, 286335539, 303178806, 320022069, 336865340,
       353708607, 370551866, 387395129, 404238376, 421081643, 437924910, 454768173, 471611428, 488454695, 505297954,
       522141217, 538984544, 555827811, 572671078, 589514341, 606357612, 623200879, 640044138, 656887401, 673730680,
       690573947, 707417214, 724260477, 741103732, 757946999, 774790258, 791633521, 808476752, 825320019, 842163286,
       859006549, 875849820, 892693087, 909536346, 926379609, 943222856, 960066123, 976909390, 993752653, 1010595908,
       1027439175, 1044282434, 1061125697, 1077969088, 1094812355, 1111655622, 1128498885, 1145342156, 1162185423,
       1179028682, 1195871945, 1212715224, 1229558491, 1246401758, 1263245021, 1280088276, 1296931543, 1313774802,
       1330618065, 1347461360, 1364304627, 1381147894, 1397991157, 1414834428, 1431677695, 1448520954, 1465364217,
       1482207464, 1499050731, 1515893998, 1532737261, 1549580516, 1566423783, 1583267042, 1600110305, 1616953504,
       1633796771, 1650640038, 1667483301, 1684326572, 1701169839, 1718013098, 1734856361, 1751699640, 1768542907,
       1785386174, 1802229437, 1819072692, 1835915959, 1852759218, 1869602481, 1886445712, 1903288979, 1920132246,
       1936975509, 1953818780, 1970662047, 1987505306, 2004348569, 2021191816, 2038035083, 2054878350, 2071721613,
       2088564868, 2105408135, 2122251394, 2139094657, 2155879323, 2172721560, 2189565853, 2206408094, 2223248279,
       2240090516, 2256934801, 2273777042, 2290617219, 2307459456, 2324303749, 2341145990, 2357986191, 2374828428,
       2391672713, 2408514954, 2425371563, 2442213800, 2459058093, 2475900334, 2492740519, 2509582756, 2526427041,
       2543269282, 2560109491, 2576951728, 2593796021, 2610638262, 2627478463, 2644320700, 2661164985, 2678007226,
       2694863867, 2711706104, 2728550397, 2745392638, 2762232823, 2779075060, 2795919345, 2812761586, 2829601763,
       2846444000, 2863288293, 2880130534, 2896970735, 2913812972, 2930657257, 2947499498, 2964356043, 2981198280,
       2998042573, 3014884814, 3031724999, 3048567236, 3065411521, 3082253762, 3099093971, 3115936208, 3132780501,
       3149622742, 3166462943, 3183305180, 3200149465, 3216991706, 3233848155, 3250690392, 3267534685, 3284376926,
       3301217111, 3318059348, 3334903633, 3351745874, 3368586051, 3385428288, 3402272581, 3419114822, 3435955023,
       3452797260, 3469641545, 3486483786, 3503340395, 3520182632, 3537026925, 3553869166, 3570709351, 3587551588,
       3604395873, 3621238114, 3638078323, 3654920560, 3671764853, 3688607094, 3705447295, 3722289532, 3739133817,
       3755976058, 3772832571, 3789674808, 3806519101, 3823361342, 3840201527, 3857043764, 3873888049, 3890730290,
       3907570467, 3924412704, 3941256997, 3958099238, 3974939439, 3991781676, 4008625961, 4025468202, 4042324747,
       4059166984, 4076011277, 4092853518, 4109693703, 4126535940, 4143380225, 4160222466, 4177062675, 4193904912,
       4210749205, 4227591446, 4244431647, 4261273884, 4278118169, 4294960410],
      [0, 16909057, 33818114, 50726147, 67636228, 84545285, 101452294, 118360327, 135272456, 152181513, 169090570,
       185998603, 202904588, 219813645, 236720654, 253628687, 270544912, 287453969, 304363026, 321271059, 338181140,
       355090197, 371997206, 388905239, 405809176, 422718233, 439627290, 456535323, 473441308, 490350365, 507257374,
       524165407, 541089824, 557998881, 574907938, 591815971, 608726052, 625635109, 642542118, 659450151, 676362280,
       693271337, 710180394, 727088427, 743994412, 760903469, 777810478, 794718511, 811618352, 828527409, 845436466,
       862344499, 879254580, 896163637, 913070646, 929978679, 946882616, 963791673, 980700730, 997608763, 1014514748,
       1031423805, 1048330814, 1065238847, 1082179648, 1099088705, 1115997762, 1132905795, 1149815876, 1166724933,
       1183631942, 1200539975, 1217452104, 1234361161, 1251270218, 1268178251, 1285084236, 1301993293, 1318900302,
       1335808335, 1352724560, 1369633617, 1386542674, 1403450707, 1420360788, 1437269845, 1454176854, 1471084887,
       1487988824, 1504897881, 1521806938, 1538714971, 1555620956, 1572530013, 1589437022, 1606345055, 1623236704,
       1640145761, 1657054818, 1673962851, 1690872932, 1707781989, 1724688998, 1741597031, 1758509160, 1775418217,
       1792327274, 1809235307, 1826141292, 1843050349, 1859957358, 1876865391, 1893765232, 1910674289, 1927583346,
       1944491379, 1961401460, 1978310517, 1995217526, 2012125559, 2029029496, 2045938553, 2062847610, 2079755643,
       2096661628, 2113570685, 2130477694, 2147385727, 2149292928, 2165938305, 2183110018, 2199756419, 2215876484,
       2232521861, 2249691526, 2266337927, 2282455944, 2299101321, 2316273034, 2332919435, 2349043596, 2365688973,
       2382858638, 2399505039, 2419829648, 2436475025, 2453646738, 2470293139, 2486413204, 2503058581, 2520228246,
       2536874647, 2553000856, 2569646233, 2586817946, 2603464347, 2619588508, 2636233885, 2653403550, 2670049951,
       2690382752, 2707028129, 2724199842, 2740846243, 2756966308, 2773611685, 2790781350, 2807427751, 2823545768,
       2840191145, 2857362858, 2874009259, 2890133420, 2906778797, 2923948462, 2940594863, 2960903088, 2977548465,
       2994720178, 3011366579, 3027486644, 3044132021, 3061301686, 3077948087, 3094074296, 3110719673, 3127891386,
       3144537787, 3160661948, 3177307325, 3194476990, 3211123391, 3231407040, 3248052417, 3265224130, 3281870531,
       3297990596, 3314635973, 3331805638, 3348452039, 3364570056, 3381215433, 3398387146, 3415033547, 3431157708,
       3447803085, 3464972750, 3481619151, 3501943760, 3518589137, 3535760850, 3552407251, 3568527316, 3585172693,
       3602342358, 3618988759, 3635114968, 3651760345, 3668932058, 3685578459, 3701702620, 3718347997, 3735517662,
       3752164063, 3772464096, 3789109473, 3806281186, 3822927587, 3839047652, 3855693029, 3872862694, 3889509095,
       3905627112, 3922272489, 3939444202, 3956090603, 3972214764, 3988860141, 4006029806, 4022676207, 4042984432,
       4059629809, 4076801522, 4093447923, 4109567988, 4126213365, 4143383030, 4160029431, 4176155640, 4192801017,
       4209972730, 4226619131, 4242743292, 4259388669, 4276558334, 4293204735],
      [0, 33751297, 67502594, 100991747, 135005188, 168756485, 201983494, 235472647, 270010376, 303761673, 337512970,
       371002123, 403966988, 437718285, 470945294, 504434447, 540020752, 573772049, 607523346, 641012499, 675025940,
       708777237, 742004246, 775493399, 807933976, 841685273, 875436570, 908925723, 941890588, 975641885, 1008868894,
       1042358047, 1080041504, 1113792801, 1147544098, 1181033251, 1215046692, 1248797989, 1282024998, 1315514151,
       1350051880, 1383803177, 1417554474, 1451043627, 1484008492, 1517759789, 1550986798, 1584475951, 1615867952,
       1649619249, 1683370546, 1716859699, 1750873140, 1784624437, 1817851446, 1851340599, 1883781176, 1917532473,
       1951283770, 1984772923, 2017737788, 2051489085, 2084716094, 2118205247, 2160083008, 2193834305, 2227585602,
       2261074755, 2295088196, 2328839493, 2362066502, 2395555655, 2430093384, 2463844681, 2497595978, 2531085131,
       2564049996, 2597801293, 2631028302, 2664517455, 2700103760, 2733855057, 2767606354, 2801095507, 2835108948,
       2868860245, 2902087254, 2935576407, 2968016984, 3001768281, 3035519578, 3069008731, 3101973596, 3135724893,
       3168951902, 3202441055, 3231735904, 3265487201, 3299238498, 3332727651, 3366741092, 3400492389, 3433719398,
       3467208551, 3501746280, 3535497577, 3569248874, 3602738027, 3635702892, 3669454189, 3702681198, 3736170351,
       3767562352, 3801313649, 3835064946, 3868554099, 3902567540, 3936318837, 3969545846, 4003034999, 4035475576,
       4069226873, 4102978170, 4136467323, 4169432188, 4203183485, 4236410494, 4269899647, 463175808, 429425025,
       530416258, 496927619, 328696964, 294946181, 395413126, 361924487, 193169544, 159418761, 260409994, 226921355,
       59739276, 25988493, 126455438, 92966799, 1001099408, 967348625, 1068339858, 1034851219, 866620564, 832869781,
       933336726, 899848087, 733190296, 699439513, 800430746, 766942107, 599760028, 566009245, 666476190, 632987551,
       1543217312, 1509466529, 1610457762, 1576969123, 1408738468, 1374987685, 1475454630, 1441965991, 1273211048,
       1239460265, 1340451498, 1306962859, 1139780780, 1106029997, 1206496942, 1173008303, 2076946608, 2043195825,
       2144187058, 2110698419, 1942467764, 1908716981, 2009183926, 1975695287, 1809037496, 1775286713, 1876277946,
       1842789307, 1675607228, 1641856445, 1742323390, 1708834751, 2606481600, 2572730817, 2673722050, 2640233411,
       2472002756, 2438251973, 2538718918, 2505230279, 2336475336, 2302724553, 2403715786, 2370227147, 2203045068,
       2169294285, 2269761230, 2236272591, 3144405200, 3110654417, 3211645650, 3178157011, 3009926356, 2976175573,
       3076642518, 3043153879, 2876496088, 2842745305, 2943736538, 2910247899, 2743065820, 2709315037, 2809781982,
       2776293343, 3678134496, 3644383713, 3745374946, 3711886307, 3543655652, 3509904869, 3610371814, 3576883175,
       3408128232, 3374377449, 3475368682, 3441880043, 3274697964, 3240947181, 3341414126, 3307925487, 4211863792,
       4178113009, 4279104242, 4245615603, 4077384948, 4043634165, 4144101110, 4110612471, 3943954680, 3910203897,
       4011195130, 3977706491, 3810524412, 3776773629, 3877240574, 3843751935]]

mulby = {}
mulby[1] = [x for x in xrange(256)]
mulby[2] = [0x00, 0x02, 0x04, 0x06, 0x08, 0x0a, 0x0c, 0x0e, 0x10, 0x12, 0x14, 0x16, 0x18, 0x1a, 0x1c, 0x1e, 0x20, 0x22,
            0x24, 0x26, 0x28, 0x2a, 0x2c, 0x2e, 0x30, 0x32, 0x34, 0x36, 0x38, 0x3a, 0x3c, 0x3e, 0x40, 0x42, 0x44, 0x46,
            0x48, 0x4a, 0x4c, 0x4e, 0x50, 0x52, 0x54, 0x56, 0x58, 0x5a, 0x5c, 0x5e, 0x60, 0x62, 0x64, 0x66, 0x68, 0x6a,
            0x6c, 0x6e, 0x70, 0x72, 0x74, 0x76, 0x78, 0x7a, 0x7c, 0x7e, 0x80, 0x82, 0x84, 0x86, 0x88, 0x8a, 0x8c, 0x8e,
            0x90, 0x92, 0x94, 0x96, 0x98, 0x9a, 0x9c, 0x9e, 0xa0, 0xa2, 0xa4, 0xa6, 0xa8, 0xaa, 0xac, 0xae, 0xb0, 0xb2,
            0xb4, 0xb6, 0xb8, 0xba, 0xbc, 0xbe, 0xc0, 0xc2, 0xc4, 0xc6, 0xc8, 0xca, 0xcc, 0xce, 0xd0, 0xd2, 0xd4, 0xd6,
            0xd8, 0xda, 0xdc, 0xde, 0xe0, 0xe2, 0xe4, 0xe6, 0xe8, 0xea, 0xec, 0xee, 0xf0, 0xf2, 0xf4, 0xf6, 0xf8, 0xfa,
            0xfc, 0xfe, 0x1b, 0x19, 0x1f, 0x1d, 0x13, 0x11, 0x17, 0x15, 0x0b, 0x09, 0x0f, 0x0d, 0x03, 0x01, 0x07, 0x05,
            0x3b, 0x39, 0x3f, 0x3d, 0x33, 0x31, 0x37, 0x35, 0x2b, 0x29, 0x2f, 0x2d, 0x23, 0x21, 0x27, 0x25, 0x5b, 0x59,
            0x5f, 0x5d, 0x53, 0x51, 0x57, 0x55, 0x4b, 0x49, 0x4f, 0x4d, 0x43, 0x41, 0x47, 0x45, 0x7b, 0x79, 0x7f, 0x7d,
            0x73, 0x71, 0x77, 0x75, 0x6b, 0x69, 0x6f, 0x6d, 0x63, 0x61, 0x67, 0x65, 0x9b, 0x99, 0x9f, 0x9d, 0x93, 0x91,
            0x97, 0x95, 0x8b, 0x89, 0x8f, 0x8d, 0x83, 0x81, 0x87, 0x85, 0xbb, 0xb9, 0xbf, 0xbd, 0xb3, 0xb1, 0xb7, 0xb5,
            0xab, 0xa9, 0xaf, 0xad, 0xa3, 0xa1, 0xa7, 0xa5, 0xdb, 0xd9, 0xdf, 0xdd, 0xd3, 0xd1, 0xd7, 0xd5, 0xcb, 0xc9,
            0xcf, 0xcd, 0xc3, 0xc1, 0xc7, 0xc5, 0xfb, 0xf9, 0xff, 0xfd, 0xf3, 0xf1, 0xf7, 0xf5, 0xeb, 0xe9, 0xef, 0xed,
            0xe3, 0xe1, 0xe7, 0xe5]
mulby[3] = [0x00, 0x03, 0x06, 0x05, 0x0c, 0x0f, 0x0a, 0x09, 0x18, 0x1b, 0x1e, 0x1d, 0x14, 0x17, 0x12, 0x11, 0x30, 0x33,
            0x36, 0x35, 0x3c, 0x3f, 0x3a, 0x39, 0x28, 0x2b, 0x2e, 0x2d, 0x24, 0x27, 0x22, 0x21, 0x60, 0x63, 0x66, 0x65,
            0x6c, 0x6f, 0x6a, 0x69, 0x78, 0x7b, 0x7e, 0x7d, 0x74, 0x77, 0x72, 0x71, 0x50, 0x53, 0x56, 0x55, 0x5c, 0x5f,
            0x5a, 0x59, 0x48, 0x4b, 0x4e, 0x4d, 0x44, 0x47, 0x42, 0x41, 0xc0, 0xc3, 0xc6, 0xc5, 0xcc, 0xcf, 0xca, 0xc9,
            0xd8, 0xdb, 0xde, 0xdd, 0xd4, 0xd7, 0xd2, 0xd1, 0xf0, 0xf3, 0xf6, 0xf5, 0xfc, 0xff, 0xfa, 0xf9, 0xe8, 0xeb,
            0xee, 0xed, 0xe4, 0xe7, 0xe2, 0xe1, 0xa0, 0xa3, 0xa6, 0xa5, 0xac, 0xaf, 0xaa, 0xa9, 0xb8, 0xbb, 0xbe, 0xbd,
            0xb4, 0xb7, 0xb2, 0xb1, 0x90, 0x93, 0x96, 0x95, 0x9c, 0x9f, 0x9a, 0x99, 0x88, 0x8b, 0x8e, 0x8d, 0x84, 0x87,
            0x82, 0x81, 0x9b, 0x98, 0x9d, 0x9e, 0x97, 0x94, 0x91, 0x92, 0x83, 0x80, 0x85, 0x86, 0x8f, 0x8c, 0x89, 0x8a,
            0xab, 0xa8, 0xad, 0xae, 0xa7, 0xa4, 0xa1, 0xa2, 0xb3, 0xb0, 0xb5, 0xb6, 0xbf, 0xbc, 0xb9, 0xba, 0xfb, 0xf8,
            0xfd, 0xfe, 0xf7, 0xf4, 0xf1, 0xf2, 0xe3, 0xe0, 0xe5, 0xe6, 0xef, 0xec, 0xe9, 0xea, 0xcb, 0xc8, 0xcd, 0xce,
            0xc7, 0xc4, 0xc1, 0xc2, 0xd3, 0xd0, 0xd5, 0xd6, 0xdf, 0xdc, 0xd9, 0xda, 0x5b, 0x58, 0x5d, 0x5e, 0x57, 0x54,
            0x51, 0x52, 0x43, 0x40, 0x45, 0x46, 0x4f, 0x4c, 0x49, 0x4a, 0x6b, 0x68, 0x6d, 0x6e, 0x67, 0x64, 0x61, 0x62,
            0x73, 0x70, 0x75, 0x76, 0x7f, 0x7c, 0x79, 0x7a, 0x3b, 0x38, 0x3d, 0x3e, 0x37, 0x34, 0x31, 0x32, 0x23, 0x20,
            0x25, 0x26, 0x2f, 0x2c, 0x29, 0x2a, 0x0b, 0x08, 0x0d, 0x0e, 0x07, 0x04, 0x01, 0x02, 0x13, 0x10, 0x15, 0x16,
            0x1f, 0x1c, 0x19, 0x1a]
mulby[9] = [0x00, 0x09, 0x12, 0x1b, 0x24, 0x2d, 0x36, 0x3f, 0x48, 0x41, 0x5a, 0x53, 0x6c, 0x65, 0x7e, 0x77, 0x90, 0x99,
            0x82, 0x8b, 0xb4, 0xbd, 0xa6, 0xaf, 0xd8, 0xd1, 0xca, 0xc3, 0xfc, 0xf5, 0xee, 0xe7, 0x3b, 0x32, 0x29, 0x20,
            0x1f, 0x16, 0x0d, 0x04, 0x73, 0x7a, 0x61, 0x68, 0x57, 0x5e, 0x45, 0x4c, 0xab, 0xa2, 0xb9, 0xb0, 0x8f, 0x86,
            0x9d, 0x94, 0xe3, 0xea, 0xf1, 0xf8, 0xc7, 0xce, 0xd5, 0xdc, 0x76, 0x7f, 0x64, 0x6d, 0x52, 0x5b, 0x40, 0x49,
            0x3e, 0x37, 0x2c, 0x25, 0x1a, 0x13, 0x08, 0x01, 0xe6, 0xef, 0xf4, 0xfd, 0xc2, 0xcb, 0xd0, 0xd9, 0xae, 0xa7,
            0xbc, 0xb5, 0x8a, 0x83, 0x98, 0x91, 0x4d, 0x44, 0x5f, 0x56, 0x69, 0x60, 0x7b, 0x72, 0x05, 0x0c, 0x17, 0x1e,
            0x21, 0x28, 0x33, 0x3a, 0xdd, 0xd4, 0xcf, 0xc6, 0xf9, 0xf0, 0xeb, 0xe2, 0x95, 0x9c, 0x87, 0x8e, 0xb1, 0xb8,
            0xa3, 0xaa, 0xec, 0xe5, 0xfe, 0xf7, 0xc8, 0xc1, 0xda, 0xd3, 0xa4, 0xad, 0xb6, 0xbf, 0x80, 0x89, 0x92, 0x9b,
            0x7c, 0x75, 0x6e, 0x67, 0x58, 0x51, 0x4a, 0x43, 0x34, 0x3d, 0x26, 0x2f, 0x10, 0x19, 0x02, 0x0b, 0xd7, 0xde,
            0xc5, 0xcc, 0xf3, 0xfa, 0xe1, 0xe8, 0x9f, 0x96, 0x8d, 0x84, 0xbb, 0xb2, 0xa9, 0xa0, 0x47, 0x4e, 0x55, 0x5c,
            0x63, 0x6a, 0x71, 0x78, 0x0f, 0x06, 0x1d, 0x14, 0x2b, 0x22, 0x39, 0x30, 0x9a, 0x93, 0x88, 0x81, 0xbe, 0xb7,
            0xac, 0xa5, 0xd2, 0xdb, 0xc0, 0xc9, 0xf6, 0xff, 0xe4, 0xed, 0x0a, 0x03, 0x18, 0x11, 0x2e, 0x27, 0x3c, 0x35,
            0x42, 0x4b, 0x50, 0x59, 0x66, 0x6f, 0x74, 0x7d, 0xa1, 0xa8, 0xb3, 0xba, 0x85, 0x8c, 0x97, 0x9e, 0xe9, 0xe0,
            0xfb, 0xf2, 0xcd, 0xc4, 0xdf, 0xd6, 0x31, 0x38, 0x23, 0x2a, 0x15, 0x1c, 0x07, 0x0e, 0x79, 0x70, 0x6b, 0x62,
            0x5d, 0x54, 0x4f, 0x46]
mulby[11] = [0x00, 0x0b, 0x16, 0x1d, 0x2c, 0x27, 0x3a, 0x31, 0x58, 0x53, 0x4e, 0x45, 0x74, 0x7f, 0x62, 0x69, 0xb0, 0xbb,
             0xa6, 0xad, 0x9c, 0x97, 0x8a, 0x81, 0xe8, 0xe3, 0xfe, 0xf5, 0xc4, 0xcf, 0xd2, 0xd9, 0x7b, 0x70, 0x6d, 0x66,
             0x57, 0x5c, 0x41, 0x4a, 0x23, 0x28, 0x35, 0x3e, 0x0f, 0x04, 0x19, 0x12, 0xcb, 0xc0, 0xdd, 0xd6, 0xe7, 0xec,
             0xf1, 0xfa, 0x93, 0x98, 0x85, 0x8e, 0xbf, 0xb4, 0xa9, 0xa2, 0xf6, 0xfd, 0xe0, 0xeb, 0xda, 0xd1, 0xcc, 0xc7,
             0xae, 0xa5, 0xb8, 0xb3, 0x82, 0x89, 0x94, 0x9f, 0x46, 0x4d, 0x50, 0x5b, 0x6a, 0x61, 0x7c, 0x77, 0x1e, 0x15,
             0x08, 0x03, 0x32, 0x39, 0x24, 0x2f, 0x8d, 0x86, 0x9b, 0x90, 0xa1, 0xaa, 0xb7, 0xbc, 0xd5, 0xde, 0xc3, 0xc8,
             0xf9, 0xf2, 0xef, 0xe4, 0x3d, 0x36, 0x2b, 0x20, 0x11, 0x1a, 0x07, 0x0c, 0x65, 0x6e, 0x73, 0x78, 0x49, 0x42,
             0x5f, 0x54, 0xf7, 0xfc, 0xe1, 0xea, 0xdb, 0xd0, 0xcd, 0xc6, 0xaf, 0xa4, 0xb9, 0xb2, 0x83, 0x88, 0x95, 0x9e,
             0x47, 0x4c, 0x51, 0x5a, 0x6b, 0x60, 0x7d, 0x76, 0x1f, 0x14, 0x09, 0x02, 0x33, 0x38, 0x25, 0x2e, 0x8c, 0x87,
             0x9a, 0x91, 0xa0, 0xab, 0xb6, 0xbd, 0xd4, 0xdf, 0xc2, 0xc9, 0xf8, 0xf3, 0xee, 0xe5, 0x3c, 0x37, 0x2a, 0x21,
             0x10, 0x1b, 0x06, 0x0d, 0x64, 0x6f, 0x72, 0x79, 0x48, 0x43, 0x5e, 0x55, 0x01, 0x0a, 0x17, 0x1c, 0x2d, 0x26,
             0x3b, 0x30, 0x59, 0x52, 0x4f, 0x44, 0x75, 0x7e, 0x63, 0x68, 0xb1, 0xba, 0xa7, 0xac, 0x9d, 0x96, 0x8b, 0x80,
             0xe9, 0xe2, 0xff, 0xf4, 0xc5, 0xce, 0xd3, 0xd8, 0x7a, 0x71, 0x6c, 0x67, 0x56, 0x5d, 0x40, 0x4b, 0x22, 0x29,
             0x34, 0x3f, 0x0e, 0x05, 0x18, 0x13, 0xca, 0xc1, 0xdc, 0xd7, 0xe6, 0xed, 0xf0, 0xfb, 0x92, 0x99, 0x84, 0x8f,
             0xbe, 0xb5, 0xa8, 0xa3]
mulby[13] = [0x00, 0x0d, 0x1a, 0x17, 0x34, 0x39, 0x2e, 0x23, 0x68, 0x65, 0x72, 0x7f, 0x5c, 0x51, 0x46, 0x4b, 0xd0, 0xdd,
             0xca, 0xc7, 0xe4, 0xe9, 0xfe, 0xf3, 0xb8, 0xb5, 0xa2, 0xaf, 0x8c, 0x81, 0x96, 0x9b, 0xbb, 0xb6, 0xa1, 0xac,
             0x8f, 0x82, 0x95, 0x98, 0xd3, 0xde, 0xc9, 0xc4, 0xe7, 0xea, 0xfd, 0xf0, 0x6b, 0x66, 0x71, 0x7c, 0x5f, 0x52,
             0x45, 0x48, 0x03, 0x0e, 0x19, 0x14, 0x37, 0x3a, 0x2d, 0x20, 0x6d, 0x60, 0x77, 0x7a, 0x59, 0x54, 0x43, 0x4e,
             0x05, 0x08, 0x1f, 0x12, 0x31, 0x3c, 0x2b, 0x26, 0xbd, 0xb0, 0xa7, 0xaa, 0x89, 0x84, 0x93, 0x9e, 0xd5, 0xd8,
             0xcf, 0xc2, 0xe1, 0xec, 0xfb, 0xf6, 0xd6, 0xdb, 0xcc, 0xc1, 0xe2, 0xef, 0xf8, 0xf5, 0xbe, 0xb3, 0xa4, 0xa9,
             0x8a, 0x87, 0x90, 0x9d, 0x06, 0x0b, 0x1c, 0x11, 0x32, 0x3f, 0x28, 0x25, 0x6e, 0x63, 0x74, 0x79, 0x5a, 0x57,
             0x40, 0x4d, 0xda, 0xd7, 0xc0, 0xcd, 0xee, 0xe3, 0xf4, 0xf9, 0xb2, 0xbf, 0xa8, 0xa5, 0x86, 0x8b, 0x9c, 0x91,
             0x0a, 0x07, 0x10, 0x1d, 0x3e, 0x33, 0x24, 0x29, 0x62, 0x6f, 0x78, 0x75, 0x56, 0x5b, 0x4c, 0x41, 0x61, 0x6c,
             0x7b, 0x76, 0x55, 0x58, 0x4f, 0x42, 0x09, 0x04, 0x13, 0x1e, 0x3d, 0x30, 0x27, 0x2a, 0xb1, 0xbc, 0xab, 0xa6,
             0x85, 0x88, 0x9f, 0x92, 0xd9, 0xd4, 0xc3, 0xce, 0xed, 0xe0, 0xf7, 0xfa, 0xb7, 0xba, 0xad, 0xa0, 0x83, 0x8e,
             0x99, 0x94, 0xdf, 0xd2, 0xc5, 0xc8, 0xeb, 0xe6, 0xf1, 0xfc, 0x67, 0x6a, 0x7d, 0x70, 0x53, 0x5e, 0x49, 0x44,
             0x0f, 0x02, 0x15, 0x18, 0x3b, 0x36, 0x21, 0x2c, 0x0c, 0x01, 0x16, 0x1b, 0x38, 0x35, 0x22, 0x2f, 0x64, 0x69,
             0x7e, 0x73, 0x50, 0x5d, 0x4a, 0x47, 0xdc, 0xd1, 0xc6, 0xcb, 0xe8, 0xe5, 0xf2, 0xff, 0xb4, 0xb9, 0xae, 0xa3,
             0x80, 0x8d, 0x9a, 0x97]
mulby[14] = [0x00, 0x0e, 0x1c, 0x12, 0x38, 0x36, 0x24, 0x2a, 0x70, 0x7e, 0x6c, 0x62, 0x48, 0x46, 0x54, 0x5a, 0xe0, 0xee,
             0xfc, 0xf2, 0xd8, 0xd6, 0xc4, 0xca, 0x90, 0x9e, 0x8c, 0x82, 0xa8, 0xa6, 0xb4, 0xba, 0xdb, 0xd5, 0xc7, 0xc9,
             0xe3, 0xed, 0xff, 0xf1, 0xab, 0xa5, 0xb7, 0xb9, 0x93, 0x9d, 0x8f, 0x81, 0x3b, 0x35, 0x27, 0x29, 0x03, 0x0d,
             0x1f, 0x11, 0x4b, 0x45, 0x57, 0x59, 0x73, 0x7d, 0x6f, 0x61, 0xad, 0xa3, 0xb1, 0xbf, 0x95, 0x9b, 0x89, 0x87,
             0xdd, 0xd3, 0xc1, 0xcf, 0xe5, 0xeb, 0xf9, 0xf7, 0x4d, 0x43, 0x51, 0x5f, 0x75, 0x7b, 0x69, 0x67, 0x3d, 0x33,
             0x21, 0x2f, 0x05, 0x0b, 0x19, 0x17, 0x76, 0x78, 0x6a, 0x64, 0x4e, 0x40, 0x52, 0x5c, 0x06, 0x08, 0x1a, 0x14,
             0x3e, 0x30, 0x22, 0x2c, 0x96, 0x98, 0x8a, 0x84, 0xae, 0xa0, 0xb2, 0xbc, 0xe6, 0xe8, 0xfa, 0xf4, 0xde, 0xd0,
             0xc2, 0xcc, 0x41, 0x4f, 0x5d, 0x53, 0x79, 0x77, 0x65, 0x6b, 0x31, 0x3f, 0x2d, 0x23, 0x09, 0x07, 0x15, 0x1b,
             0xa1, 0xaf, 0xbd, 0xb3, 0x99, 0x97, 0x85, 0x8b, 0xd1, 0xdf, 0xcd, 0xc3, 0xe9, 0xe7, 0xf5, 0xfb, 0x9a, 0x94,
             0x86, 0x88, 0xa2, 0xac, 0xbe, 0xb0, 0xea, 0xe4, 0xf6, 0xf8, 0xd2, 0xdc, 0xce, 0xc0, 0x7a, 0x74, 0x66, 0x68,
             0x42, 0x4c, 0x5e, 0x50, 0x0a, 0x04, 0x16, 0x18, 0x32, 0x3c, 0x2e, 0x20, 0xec, 0xe2, 0xf0, 0xfe, 0xd4, 0xda,
             0xc8, 0xc6, 0x9c, 0x92, 0x80, 0x8e, 0xa4, 0xaa, 0xb8, 0xb6, 0x0c, 0x02, 0x10, 0x1e, 0x34, 0x3a, 0x28, 0x26,
             0x7c, 0x72, 0x60, 0x6e, 0x44, 0x4a, 0x58, 0x56, 0x37, 0x39, 0x2b, 0x25, 0x0f, 0x01, 0x13, 0x1d, 0x47, 0x49,
             0x5b, 0x55, 0x7f, 0x71, 0x63, 0x6d, 0xd7, 0xd9, 0xcb, 0xc5, 0xef, 0xe1, 0xf3, 0xfd, 0xa7, 0xa9, 0xbb, 0xb5,
             0x9f, 0x91, 0x83, 0x8d]

Sbox = (
0x63, 0x7C, 0x77, 0x7B, 0xF2, 0x6B, 0x6F, 0xC5, 0x30, 0x01, 0x67, 0x2B, 0xFE, 0xD7, 0xAB, 0x76, 0xCA, 0x82, 0xC9, 0x7D,
0xFA, 0x59, 0x47, 0xF0, 0xAD, 0xD4, 0xA2, 0xAF, 0x9C, 0xA4, 0x72, 0xC0, 0xB7, 0xFD, 0x93, 0x26, 0x36, 0x3F, 0xF7, 0xCC,
0x34, 0xA5, 0xE5, 0xF1, 0x71, 0xD8, 0x31, 0x15, 0x04, 0xC7, 0x23, 0xC3, 0x18, 0x96, 0x05, 0x9A, 0x07, 0x12, 0x80, 0xE2,
0xEB, 0x27, 0xB2, 0x75, 0x09, 0x83, 0x2C, 0x1A, 0x1B, 0x6E, 0x5A, 0xA0, 0x52, 0x3B, 0xD6, 0xB3, 0x29, 0xE3, 0x2F, 0x84,
0x53, 0xD1, 0x00, 0xED, 0x20, 0xFC, 0xB1, 0x5B, 0x6A, 0xCB, 0xBE, 0x39, 0x4A, 0x4C, 0x58, 0xCF, 0xD0, 0xEF, 0xAA, 0xFB,
0x43, 0x4D, 0x33, 0x85, 0x45, 0xF9, 0x02, 0x7F, 0x50, 0x3C, 0x9F, 0xA8, 0x51, 0xA3, 0x40, 0x8F, 0x92, 0x9D, 0x38, 0xF5,
0xBC, 0xB6, 0xDA, 0x21, 0x10, 0xFF, 0xF3, 0xD2, 0xCD, 0x0C, 0x13, 0xEC, 0x5F, 0x97, 0x44, 0x17, 0xC4, 0xA7, 0x7E, 0x3D,
0x64, 0x5D, 0x19, 0x73, 0x60, 0x81, 0x4F, 0xDC, 0x22, 0x2A, 0x90, 0x88, 0x46, 0xEE, 0xB8, 0x14, 0xDE, 0x5E, 0x0B, 0xDB,
0xE0, 0x32, 0x3A, 0x0A, 0x49, 0x06, 0x24, 0x5C, 0xC2, 0xD3, 0xAC, 0x62, 0x91, 0x95, 0xE4, 0x79, 0xE7, 0xC8, 0x37, 0x6D,
0x8D, 0xD5, 0x4E, 0xA9, 0x6C, 0x56, 0xF4, 0xEA, 0x65, 0x7A, 0xAE, 0x08, 0xBA, 0x78, 0x25, 0x2E, 0x1C, 0xA6, 0xB4, 0xC6,
0xE8, 0xDD, 0x74, 0x1F, 0x4B, 0xBD, 0x8B, 0x8A, 0x70, 0x3E, 0xB5, 0x66, 0x48, 0x03, 0xF6, 0x0E, 0x61, 0x35, 0x57, 0xB9,
0x86, 0xC1, 0x1D, 0x9E, 0xE1, 0xF8, 0x98, 0x11, 0x69, 0xD9, 0x8E, 0x94, 0x9B, 0x1E, 0x87, 0xE9, 0xCE, 0x55, 0x28, 0xDF,
0x8C, 0xA1, 0x89, 0x0D, 0xBF, 0xE6, 0x42, 0x68, 0x41, 0x99, 0x2D, 0x0F, 0xB0, 0x54, 0xBB, 0x16)
Sbox_inv = (
0x52, 0x09, 0x6A, 0xD5, 0x30, 0x36, 0xA5, 0x38, 0xBF, 0x40, 0xA3, 0x9E, 0x81, 0xF3, 0xD7, 0xFB, 0x7C, 0xE3, 0x39, 0x82,
0x9B, 0x2F, 0xFF, 0x87, 0x34, 0x8E, 0x43, 0x44, 0xC4, 0xDE, 0xE9, 0xCB, 0x54, 0x7B, 0x94, 0x32, 0xA6, 0xC2, 0x23, 0x3D,
0xEE, 0x4C, 0x95, 0x0B, 0x42, 0xFA, 0xC3, 0x4E, 0x08, 0x2E, 0xA1, 0x66, 0x28, 0xD9, 0x24, 0xB2, 0x76, 0x5B, 0xA2, 0x49,
0x6D, 0x8B, 0xD1, 0x25, 0x72, 0xF8, 0xF6, 0x64, 0x86, 0x68, 0x98, 0x16, 0xD4, 0xA4, 0x5C, 0xCC, 0x5D, 0x65, 0xB6, 0x92,
0x6C, 0x70, 0x48, 0x50, 0xFD, 0xED, 0xB9, 0xDA, 0x5E, 0x15, 0x46, 0x57, 0xA7, 0x8D, 0x9D, 0x84, 0x90, 0xD8, 0xAB, 0x00,
0x8C, 0xBC, 0xD3, 0x0A, 0xF7, 0xE4, 0x58, 0x05, 0xB8, 0xB3, 0x45, 0x06, 0xD0, 0x2C, 0x1E, 0x8F, 0xCA, 0x3F, 0x0F, 0x02,
0xC1, 0xAF, 0xBD, 0x03, 0x01, 0x13, 0x8A, 0x6B, 0x3A, 0x91, 0x11, 0x41, 0x4F, 0x67, 0xDC, 0xEA, 0x97, 0xF2, 0xCF, 0xCE,
0xF0, 0xB4, 0xE6, 0x73, 0x96, 0xAC, 0x74, 0x22, 0xE7, 0xAD, 0x35, 0x85, 0xE2, 0xF9, 0x37, 0xE8, 0x1C, 0x75, 0xDF, 0x6E,
0x47, 0xF1, 0x1A, 0x71, 0x1D, 0x29, 0xC5, 0x89, 0x6F, 0xB7, 0x62, 0x0E, 0xAA, 0x18, 0xBE, 0x1B, 0xFC, 0x56, 0x3E, 0x4B,
0xC6, 0xD2, 0x79, 0x20, 0x9A, 0xDB, 0xC0, 0xFE, 0x78, 0xCD, 0x5A, 0xF4, 0x1F, 0xDD, 0xA8, 0x33, 0x88, 0x07, 0xC7, 0x31,
0xB1, 0x12, 0x10, 0x59, 0x27, 0x80, 0xEC, 0x5F, 0x60, 0x51, 0x7F, 0xA9, 0x19, 0xB5, 0x4A, 0x0D, 0x2D, 0xE5, 0x7A, 0x9F,
0x93, 0xC9, 0x9C, 0xEF, 0xA0, 0xE0, 0x3B, 0x4D, 0xAE, 0x2A, 0xF5, 0xB0, 0xC8, 0xEB, 0xBB, 0x3C, 0x83, 0x53, 0x99, 0x61,
0x17, 0x2B, 0x04, 0x7E, 0xBA, 0x77, 0xD6, 0x26, 0xE1, 0x69, 0x14, 0x63, 0x55, 0x21, 0x0C, 0x7D)
Rcon = (0x8d, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36, 0x6c, 0xd8, 0xab, 0x4d, 0x9a)

mix_columns_matrix = [
    2, 3, 1, 1,
    1, 2, 3, 1,
    1, 1, 2, 3,
    3, 1, 1, 2
]

inv_mix_columns_matrix = [
    14, 11, 13, 9,
    9, 14, 11, 13,
    13, 9, 14, 11,
    11, 13, 9, 14
]


# HELPER FUNCTIONS
# abcd, 1234 -> d4 c3 b2 a1
def change_nibbles(a, b, size=4):
    return [(((a >> (i * size)) & 0xf) << 4) | (b >> (i * size)) & 0xf for i in xrange(size * 2)]


def array_to_matrix(array, n=4):
    assert len(array) == n * n
    return matrix([array[i * n:(i * n) + n] for i in xrange(n)]).transpose()


def matrix_to_array(m):
    return [e for sublist in list(m.transpose()) for e in sublist]


def xor_matrices(a, b):
    return matrix([[a[i][j] ^^ b[i][j] for j in xrange(a.dimensions()[0])] for i in xrange(a.dimensions()[0])])


def xor_vector(a, b):
    return vector([x ^^ y for x, y in zip(a, b)])


def array_to_hexstring(array):
    return ''.join(chr(x) for x in array).encode('hex')


def matrix_to_hexstring(m):
    return array_to_hexstring(matrix_to_array(m))


def bytes_to_matrix(v):
    return array_to_matrix(map(int, v), 4)


# AES FUNCTIONS
def shift_rows(state):
    """
    0   4   8   12
    1   5   9   13
    2   6   10  14
    3   7   11  15

    0   4   8   12
    5   9   13  1
    10  14  2   6
    15  3   7   11
    """
    return matrix([state[0], list(state[1][1:]) + [state[1][0]], [state[2][2], state[2][3], state[2][0], state[2][1]],
                   [state[3][3]] + list(state[3][:3])])


def inv_shift_rows(state):
    return matrix([state[0], [state[1][3]] + list(state[1][:3]), [state[2][2], state[2][3], state[2][0], state[2][1]],
                   list(state[3][1:]) + [state[3][0]]])


def sub_bytes(state):
    """
    0   4   8   12
    1   5   9   13
    2   6   10  14
    3   7   11  15

    Sbox[0]   Sbox[4]   Sbox[8]   Sbox[12]
    Sbox[1]   Sbox[5]   Sbox[9]   Sbox[13]
    Sbox[2]   Sbox[6]   Sbox[10]  Sbox[14]
    Sbox[3]   Sbox[7]   Sbox[11]  Sbox[15]
    """
    new_state = []
    for i in xrange(state.dimensions()[0]):
        new_state.append([Sbox[state[i][j]] for j in xrange(state.dimensions()[1])])
    return matrix(new_state)


def inv_sub_bytes(state):
    new_state = []
    for i in xrange(state.dimensions()[0]):
        new_state.append([Sbox_inv[state[i][j]] for j in xrange(state.dimensions()[1])])
    return matrix(new_state)


def mix_column(col):
    b0, b1, b2, b3 = col
    d0 = mulby[2][b0] ^^ mulby[3][b1] ^^ b2 ^^ b3
    d1 = b0 ^^ mulby[2][b1] ^^ mulby[3][b2] ^^ b3
    d2 = b0 ^^ b1 ^^ mulby[2][b2] ^^ mulby[3][b3]
    d3 = mulby[3][b0] ^^ b1 ^^ b2 ^^ mulby[2][b3]
    return vector([d0, d1, d2, d3])


def mix_columns(m):
    """
    for all columns:
    |d0|   |2 3 1 1|   |c0|
    |d1| = |1 2 3 1| * |c1|
    |d2|   |1 1 2 3|   |c2|
    |d3|   |3 1 1 2|   |c3|
    """
    return matrix(map(mix_column, m.columns())).transpose()


def inverse_mix_column(col):
    b0, b1, b2, b3 = col
    d0 = mulby[14][b0] ^^ mulby[11][b1] ^^ mulby[13][b2] ^^ mulby[9][b3]
    d1 = mulby[9][b0] ^^ mulby[14][b1] ^^ mulby[11][b2] ^^ mulby[13][b3]
    d2 = mulby[13][b0] ^^ mulby[9][b1] ^^ mulby[14][b2] ^^ mulby[11][b3]
    d3 = mulby[11][b0] ^^ mulby[13][b1] ^^ mulby[9][b2] ^^ mulby[14][b3]
    return vector([d0, d1, d2, d3])


def inverse_mix_columns(m):
    return matrix(map(inverse_mix_column, m.columns()))


def key_schedule_once(key, no):
    c0 = list(key.column(3)[1:]) + [key.column(3)[0]]
    c0 = vector([Sbox[x] for x in c0])
    c0[0] ^^= Rcon[no]
    c0 = xor_vector(c0, key.column(0))

    c1 = xor_vector(c0, key.column(1))
    c2 = xor_vector(c1, key.column(2))
    c3 = xor_vector(c2, key.column(3))
    return matrix([c0, c1, c2, c3]).transpose()


def key_schedule(key):
    """
    returns 11 round keys as 4x4 matrices
    """
    round_keys = [[]] * 11
    round_keys[0] = key
    for no in xrange(1, 11):
        key = key_schedule_once(key, no)
        round_keys[no] = key
    return round_keys


def inv_key_schedule_once(key, round_no):
    c3 = xor_vector(key.column(2), key.column(3))
    c2 = xor_vector(key.column(1), key.column(2))
    c1 = xor_vector(key.column(0), key.column(1))

    c3_roted = list(c3[1:]) + [c3[0]]
    c3_sub = vector([Sbox[x] for x in c3_roted])
    c3_sub[0] ^^= Rcon[round_no]
    c0 = xor_vector(c3_sub, key.column(0))
    return matrix([c0, c1, c2, c3]).transpose()


def inv_key_schedule(key, round_no=10):
    """
    returns aes key from given round key
    """
    for x in xrange(round_no):
        key = inv_key_schedule_once(key, round_no - x)
    return key


def add_round_key(state, round_key):
    return xor_matrices(state, round_key)


def encrypt(state, key):
    """ Standard AES-128 encryption
    State: 4x4 matrix
    Key: 4x4 matrix
    """
    round_keys = key_schedule(key)
    # initial round
    state = add_round_key(state, round_keys[0])

    # rounds
    for round_no in xrange(1, 10):
        state = sub_bytes(state)
        state = shift_rows(state)
        state = mix_columns(state)
        state = add_round_key(state, round_keys[round_no])

    # final round
    state = sub_bytes(state)
    state = shift_rows(state)
    state = add_round_key(state, round_keys[-1])

    return state

def round(state, no, Tboxes, Tyboxes, TTyboxesComposed=None):
    state = shift_rows(state)

    for i in xrange(4):
        if TTyboxesComposed is not None:
            v3 = TTyboxesComposed[no][(4 * i)][state.column(i)[0]]
            v4 = TTyboxesComposed[no][(4 * i) + 1][state.column(i)[1]]
            v5 = TTyboxesComposed[no][(4 * i) + 2][state.column(i)[2]]
            v6 = TTyboxesComposed[no][(4 * i) + 3][state.column(i)[3]]

            a = (XorBox[(16 * ((XorBox[(16 * ((v3 >> 4) & 0xf)) + ((v4 >> 4) & 0xf)]) & 0xf)) + (
            XorBox[(16 * ((v5 >> 4) & 0xf)) + ((v6 >> 4) & 0xf)])] << 4) | XorBox[
                    (16 * (XorBox[(16 * (v3 & 0xf)) + (v4 & 0xf)] & 0xf)) + (
                    XorBox[(16 * (v5 & 0xf)) + (v6 & 0xf)] & 0xf)]
            b = (XorBox[(16 * ((XorBox[(16 * ((v3 >> 12) & 0xf)) + ((v4 >> 12) & 0xf)]) & 0xf)) + (
            XorBox[(16 * ((v5 >> 12) & 0xf)) + ((v6 >> 12) & 0xf)])] << 4) | XorBox[
                    (16 * ((XorBox[(16 * ((v3 >> 8) & 0xf)) + ((v4 >> 8) & 0xf)]) & 0xf)) + (
                    XorBox[(16 * ((v5 >> 8) & 0xf)) + ((v6 >> 8) & 0xf)])]
            c = (XorBox[(16 * ((XorBox[(16 * ((v3 >> 20) & 0xf)) + ((v4 >> 20) & 0xf)]) & 0xf)) + (
            XorBox[(16 * ((v5 >> 20) & 0xf)) + ((v6 >> 20) & 0xf)])] << 4) | XorBox[
                    (16 * ((XorBox[(16 * ((v3 >> 16) & 0xf)) + ((v4 >> 16) & 0xf)]) & 0xf)) + (
                    XorBox[(16 * ((v5 >> 16) & 0xf)) + ((v6 >> 16) & 0xf)])]
            d = (XorBox[(16 * ((XorBox[(16 * ((v3 >> 28) & 0xf)) + ((v4 >> 28) & 0xf)]) & 0xf)) + (
            XorBox[(16 * ((v5 >> 28) & 0xf)) + ((v6 >> 28) & 0xf)])] << 4) | XorBox[
                    (16 * ((XorBox[(16 * ((v3 >> 24) & 0xf)) + ((v4 >> 24) & 0xf)]) & 0xf)) + (
                    XorBox[(16 * ((v5 >> 24) & 0xf)) + ((v6 >> 24) & 0xf)])]
        else:
            v3 = Tboxes[no][(4 * i)][state.column(i)[0]]
            v4 = Tboxes[no][(4 * i) + 1][state.column(i)[1]]
            v5 = Tboxes[no][(4 * i) + 2][state.column(i)[2]]
            v6 = Tboxes[no][(4 * i) + 3][state.column(i)[3]]

            new_column = Tyboxes[0][v3] ^^ Tyboxes[1][v4] ^^ Tyboxes[2][v5] ^^ Tyboxes[3][v6]
            d, c, b, a = [int(x) for x in i2b(new_column, 4 * 8)]
        state[:, i] = vector([a, b, c, d])

    return state


def encrypt_whitebox(state, Tboxes, Tyboxes, TTyboxesComposed=None, TTyboxFinal=None):
    """
    state: matrix(4x4), plaintext
    Tboxes: T[round_no][byte_no][x] = Sbox[x ^^ shift_rows(k[round_no][byte_no])] -> 10*16*256
    Tyboxes: Ty[byte_in_column_no][x] -> 4*256
    TTyboxesComposed: TTyboxesComposed[round_no][byte_no][x] = Ty[byte_no%4][ T[round_no][byte_no][x] ] -> 9*16*256
    TTyboxFinal: Sbox[x ^^ shift_rows(k[last_round][byte_no])], if None Tboxes[-1] is used
    """
    if TTyboxFinal is None:
        TTyboxFinal = Tboxes[-1]

    for no in xrange(9):
        state = round(state, no, Tboxes, Tyboxes, TTyboxesComposed)

    state = shift_rows(state)
    for i in xrange(4):
        state[:, i] = vector([TTyboxFinal[(i * 4) + j][state[j][i]] for j in xrange(4)])

    return state


def generate_tyboxes():
    Ty = []
    for i in xrange(4):
        tmp = []
        for j in xrange(256):
            mi = []
            mi.append(mulby[mix_columns_matrix[i + 0]][j])
            mi.append(mulby[mix_columns_matrix[i + 4]][j])
            mi.append(mulby[mix_columns_matrix[i + 8]][j])
            mi.append(mulby[mix_columns_matrix[i + 12]][j])
            tmp.append((mi[3] << 24) | (mi[2] << 16) | (mi[1] << 8) | mi[0])
        Ty.append(tmp)
    return Ty


def generate_tboxes(key):
    round_keys = key_schedule(key)

    T = [[]] * 10
    for round_no in xrange(10):
        T[round_no] = [[]] * 16
        key_round = matrix_to_array(shift_rows(round_keys[round_no]))
        for byte_no in xrange(16):
            T[round_no][byte_no] = []
            for x in xrange(256):
                if round_no == 9:
                    T[round_no][byte_no].append(
                        Sbox[x ^^ key_round[byte_no]] ^^ matrix_to_array(round_keys[round_no + 1])[byte_no])
                else:
                    T[round_no][byte_no].append(Sbox[x ^^ key_round[byte_no]])
    return T


def compose_T_Ty_boxes(Tboxes, Tyboxes):
    TTyboxesComposed = [[]] * 10
    for round_no in xrange(10):
        TTyboxesComposed[round_no] = [[]] * 16
        for byte_no in xrange(16):
            TTyboxesComposed[round_no][byte_no] = []
            for x in xrange(256):
                TTyboxesComposed[round_no][byte_no].append(Tyboxes[byte_no % 4][Tboxes[round_no][byte_no][x]])
    return TTyboxesComposed


def generate_boxes(key):
    """Returns boxes used by whitebox AES:
    T-boxes
    Ty tables
    composed T and Ty boxes
    final (last) composed T box

    for dfa attack you need only last two
    """
    T = generate_tboxes(key)
    Ty = generate_tyboxes()
    TTy_composed = compose_T_Ty_boxes(T, Ty)
    TTyboxFinal = T[-1]
    return T, Ty, TTy_composed, TTyboxFinal


def recover_key_unprotected_wbaes(TTyboxesComposed, Tyboxes):
    x = 1
    scrambled_key = []
    for i in xrange(16):
        value = TTyboxesComposed[0][i][x]
        for j in xrange(256):
            if value == Tyboxes[i % 4][Sbox[x ^^ j]]:
                scrambled_key.append(j)
                break

    if len(scrambled_key) < 16:
        print('error')
        return None
    key = inv_shift_rows(array_to_matrix(scrambled_key, 4))
    return key


def recover_key_unprotected_wbaes_from_TTyboxFinal(TTyboxFinal, probes=3):
    key = []
    for i in xrange(16):
        Ti = TTyboxFinal[i]

        k_found_probes = set()
        for probe in xrange(probes):
            k_found = []
            x, y = randint(0, 255), randint(0, 255)
            for k in xrange(256):
                if Ti[x] ^^ Ti[y] == Sbox[x ^^ k] ^^ Sbox[y ^^ k] and (probe == 0 or k in k_found_probes):
                    k_found.append(k)

            if len(k_found_probes) == 0:
                k_found_probes.update(k_found)
            else:
                k_found_probes.intersection_update(k_found)

        if len(k_found_probes) != 1:
            print('error')
            return None
        key.append(k_found_probes.pop())

    key = inv_shift_rows(array_to_matrix(key, 4))
    key = inv_key_schedule(key, 9)
    return key


def generate_faults(TTyboxesComposed, TTyboxFinal, group_no, trials):
    """
    group_no(int): in [0, 1, 2, 3], column in which fault will be made
    trials(int): more trials, higher probability of unique subkeys
    """
    plaintext = array_to_matrix(map(int, bytes(b'a' * 16)), 4)
    ciphertexts_with_faults = []

    for j in xrange(trials):
        # preapare fault
        fault_in_row_no = 0
        position = 4 * group_no + fault_in_row_no
        fault = randint(0, 255)
        TTyboxesComposed_copy = copy(TTyboxesComposed[8][position])
        TTyboxesComposed[8][position] = [Ty[fault_in_row_no][fault] for x in TTyboxesComposed[8][position]]
        '''
        A E I M
        B F J N
        C G K O
        D H L P

        Ty[0] <- fault in row 0 (in place of A, E, I or M)
        if fault is in any other row (position == 4*group_no + row_no), the equations in dfa need to be changed (mulby[mix_columns_matrix[(4*group_no)+2]] etc)
        for row == 1, mix_columns_matrix will be:
        2, 3, 1, 1 -> 3, 1, 1, 2
        1, 2, 3, 1 -> 2, 3, 1, 1
        1, 1, 2, 3 -> 1, 2, 3, 1
        3, 1, 1, 2 -> 1, 1, 2, 3
        '''

        # faulty encrypt_whiteboxion
        ciphertext = encrypt_whitebox(plaintext, None, None, TTyboxesComposed, TTyboxFinal)
        ciphertexts_with_faults.append(ciphertext)

        # unfault
        TTyboxesComposed[8][position] = TTyboxesComposed_copy

    # normal ciphertext
    ciphertext_original = encrypt_whitebox(plaintext, None, None, TTyboxesComposed, TTyboxFinal)

    return ciphertext_original, ciphertexts_with_faults


def dfa(TTyboxesComposed, TTyboxFinal, trials=5):
    """
    Differential fault analysis attack on whitebox AES-128

    k' = shift_rows(k)

    A ... ... ...
    B ... ... ...
    C ... ... ...
    D ... ... ...

    S[ 2.S[A+k'8,0] + 3.S[B+k'8,1] + S[C+k'8,2]   + S[D+k'8,3] + k'9,0 ] + k10,0
    ... ... ... S[ S[A+k'8,0]   + 2.S[B+k'8,1] + 3.S[C+k'8,2] + S[D+k'8,3] + k'9,7 ] + k10,7
    ... ... S[ S[A+k'8,0]   + S[B+k'8,1]   + 2.S[C+k'8,2] + 3.S[D+k'8,3] + k'9,10 ] + k10,10
    ... S[ 3.S[A+k'8,0] + S[B+k'8,1]   + S[C+k'8,2]   + 2.S[D+k'8,3] + k'9,13 ] + k10,13


    TTyboxesComposed[8][0] = Ty[0][X]  <-- fault in TTyboxesComposed

    S[ 2.X + 3.S[B+k'8,1] + S[C+k'8,2]   + S[D+k'8,3] + k'9,0 ] + k10,0
    ... ... ... S[ X   + 2.S[B+k'8,1] + 3.S[C+k'8,2] + S[D+k'8,3] + k'9,7 ] + k10,7
    ... ... S[ X   + S[B+k'8,1]   + 2.S[C+k'8,2] + 3.S[D+k'8,3] + k'9,10 ] + k10,10
    ... S[ 3.X + S[B+k'8,1]   + S[C+k'8,2]   + 2.S[D+k'8,3] + k'9,13 ] + k10,13
    """
    key = {}
    groups = [
        [0, 7, 10, 13],
        [1, 4, 11, 14],
        [2, 5, 8, 15],
        [3, 6, 9, 12]
    ]

    for group_no, group in enumerate(groups):
        print('Group no {} ({}):'.format(group_no, group))
        ciphertext_original, ciphertexts_with_faults = generate_faults(TTyboxesComposed, TTyboxFinal, group_no,
                                                                       trials=trials)
        for fault_no in xrange(len(ciphertexts_with_faults)):
            O = [matrix_to_array(ciphertext_original)[position] for position in group]
            Op = [matrix_to_array(ciphertexts_with_faults[fault_no])[position] for position in group]

            key_candidates = {x: set() for x in group}
            for Z in xrange(256):
                for Y0 in xrange(256):
                    if O[0] ^^ Op[0] == Sbox[Y0] ^^ Sbox[mulby[mix_columns_matrix[(4 * group_no) + 0]][Z] ^^ Y0]:
                        for Y1 in xrange(256):
                            if O[1] ^^ Op[1] == Sbox[Y1] ^^ Sbox[
                                                mulby[mix_columns_matrix[(4 * group_no) + 1]][Z] ^^ Y1]:
                                for Y2 in xrange(256):
                                    if O[2] ^^ Op[2] == Sbox[Y2] ^^ Sbox[
                                                        mulby[mix_columns_matrix[(4 * group_no) + 2]][Z] ^^ Y2]:
                                        for Y3 in xrange(256):
                                            if O[3] ^^ Op[3] == Sbox[Y3] ^^ Sbox[
                                                                mulby[mix_columns_matrix[(4 * group_no) + 3]][
                                                                    Z] ^^ Y3]:
                                                key_candidates[group[0]].add(O[0] ^^ Sbox[Y0])
                                                key_candidates[group[1]].add(O[1] ^^ Sbox[Y1])
                                                key_candidates[group[2]].add(O[2] ^^ Sbox[Y2])
                                                key_candidates[group[3]].add(O[3] ^^ Sbox[Y3])
            for position in group:
                if position not in key:
                    key[position] = key_candidates[position]
                else:
                    key[position].intersection_update(key_candidates[position])

    if any(len(key[position]) == 0 for position in xrange(16)):
        print('Key not recovered')
        print(key)
        return None

    if any(len(key[position]) > 1 for position in xrange(16)):
        print('Key not recovered, trying with trials={}'.format(trials + 3))
        return dfa(TTyboxesComposed, TTyboxFinal, trials=trials + 3)

    key = array_to_matrix([key[position].pop() for position in xrange(16)])
    return inv_key_schedule(key)


def boxes_to_binformat(TTyboxesComposed):
    result = ''
    for round_no in xrange(9):
        for byte_no in xrange(16):
            for value in xrange(256):
                result += i2b(TTyboxesComposed[round_no][byte_no][value], 4 * 8)

    with open('TTyboxesComposed.bin', 'wb') as f:
        f.write(result)


def boxes_from_binformat():
    with open('TTyboxesComposed.bin', 'rb') as f:
        bin_boxes = f.read()

    TTyboxesComposed = []
    for round_no in xrange(9):
        TTyboxesComposed.append([])
        for byte_no in xrange(16):
            TTyboxesComposed[round_no].append([])
            for value in xrange(256):
                TTyboxesComposed[round_no][byte_no].append(b2i(bin_boxes[:4]))
                bin_boxes = bin_boxes[4:]
    return TTyboxesComposed

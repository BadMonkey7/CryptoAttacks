from CryptoAttacks.EllipticCurve.singular_sage import log_singular


def test_node():
    print('Test discrete log with node')
    x,y = QQ['x,y'].gens()
    f = x^3 + 2*x^2 + x
    p = 340282366920938463463374607431768178229
    P = (4, 10)
    Q = (104708042197107879674895393611622483404, 276453155315387771858614408885950682409)

    # will take some time, maybe smaller example will be better
    d, _ = log_singular(f, p, P, Q)
    assert d == 35996229751200732572713356533972460509


def test_cusp():
    print('Test discrete log with cusp')
    x,y = QQ['x,y'].gens()
    f = x^3 + 330762886318172394930696774593722907073441522749*x^2 + 6688528763308432271990130594743714957884433976*x + 759214505060964991648440027744756938681220132782
    p = 785482254973602570424508065997142892171538672071
    P = (1, 68596750097555148647236998220450053605331891340)
    Q = (453762742842106273626661098428675073042272925939, 680431771406393872682158079307720147623468587944)

    d, _ = log_singular(f, p, P, Q)
    assert d == 733677047520440525642834723493438680490143125031


if __name__ == "__main__":
    test_cusp()
    test_node()
